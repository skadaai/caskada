# Documentation:
# https://direnv.net/man/direnv-stdlib.1.html

# Step 1: Define variables and functions.
VENV_DIR=".venv"

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No color

# Step 2: Load system dependencies (python, uv) from Nix.
strict_env
layout node
use nix

# Step 3: Create the virtual environment using uv if it doesn't exist.
# This replaces the creation part of `layout python`.
if [ ! -d "$VENV_DIR" ]; then
  printf "direnv: ${YELLOW}Creating virtual environment in '$VENV_DIR' with uv.${NC}\n"
  uv venv --python 3.13 "$VENV_DIR"
fi

# Step 4: Manually "activate" the environment in a direnv-friendly way.
# This replaces the activation part of `layout python`.
export VIRTUAL_ENV="$PWD/$VENV_DIR"
path_add PATH "$VIRTUAL_ENV/bin"

# Step 5: Add your project's code to the PYTHONPATH.
# 'path_add' safely creates the variable or prepends to it.
path_add PYTHONPATH python

# Step 6: Install dependencies with `uv pip`.
# 'watch_file' tells direnv to re-run this block if requirements.txt changes.
watch_file requirements.txt
if [ -f "requirements.txt" ]; then
  printf "direnv: ${YELLOW}Syncing dependencies with uv.${NC}\n"
  uv pip install -r requirements.txt
fi
